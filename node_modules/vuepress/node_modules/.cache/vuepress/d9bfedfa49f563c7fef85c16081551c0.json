{"remainingRequest":"/Users/study/my-blog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/study/my-blog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/study/my-blog/docs/blog/4.md?vue&type=template&id=6f83f280&","dependencies":[{"path":"/Users/study/my-blog/docs/blog/4.md","mtime":1574582036000},{"path":"/Users/study/my-blog/node_modules/cache-loader/dist/cjs.js","mtime":1580964447261},{"path":"/Users/study/my-blog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1580964450105},{"path":"/Users/study/my-blog/node_modules/cache-loader/dist/cjs.js","mtime":1580964447261},{"path":"/Users/study/my-blog/node_modules/vue-loader/lib/index.js","mtime":1580964450105},{"path":"/Users/study/my-blog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1580964447251}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"关于-vue-中的一些问题\"><a class=\"header-anchor\" href=\"#关于-vue-中的一些问题\">#</a> 关于 vue 中的一些问题</h1>\n<p>1.vue生命周期的理解<br>\nbeforeCreate、created（可以首次拿到data中定义的数据）、beforeMount、mounted、beforeUpdate、updated、beforeDestroy、destroyed<br>\n总共分为8个阶段，创建前后、载入前后、更新前后、销毁前后<br>\n创建前/后： 在 beforeCreate 阶段，vue 实例的挂载元素 el 还没有。</p>\n<p>载入前/后：在 beforeMount 阶段，vue 实例的$el 和 data 都初始化了，但还是挂载之前为虚拟的 dom 节点，data.message 还未替换。在 mounted 阶段，vue 实例挂载完成，data.message 成功渲染。</p>\n<p>更新前/后：当 data 变化时，会触发 beforeUpdate 和 updated 方法。</p>\n<p>销毁前/后：在执行 destroy 方法后，对 data 的改变不会再触发周期函数，说明此时 vue 实例已经解除了事件监听以及和 dom 的绑定，但是 dom 结构依然存在</p>\n<p>2.computed中的getter和setter</p>\n<pre><code>&lt;!--直接复制的官网示例--&gt;\ncomputed: {\n    fullName: {\n    // getter\n    get: function () {\n        return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n        var names = newValue.split(' ')\n        this.firstName = names[0]\n        this.lastName = names[names.length - 1]\n        }\n    }\n}\n\nget：通过设置get方法可以得到fullName的新值。\nset：通过set的方法，设置一个值（value）来改变fullName相关联的值，引起fullName重新的计算，相应的页面上fullName也会发生改变成新的内容。\n</code></pre>\n<p>3.如何watch监听一个对象内部的变化。</p>\n<p>如果只是监听obj内的某一个属性变化，可以直接obj.key进行监听。</p>\n<pre><code>watch: {\n    'obj.question': function (newQuestion, oldQuestion) {\n        this.answer = 'Waiting for you to stop typing...'\n        this.debouncedGetAnswer()\n    }\n}\n</code></pre>\n<p>如果对整个obj深层监听</p>\n<pre><code>watch: {\n    obj: {\n        handler: function (newQuestion, oldQuestion) {\n            this.answer = 'Waiting for you to stop typing...'\n            this.debouncedGetAnswer()\n    },\n        deep: true,\n        immediate: true\n    }\n}\nimmediate的作用：当值第一次进行绑定的时候并不会触发watch监听，使用immediate则可以在最初绑定的时候执行。\n</code></pre>\n<p>4.v-for循环key的作用<br>\nvue的dom渲染是虚拟dom，数据发生变化时，diff算法会只比较更改的部分，\n如果数据项的顺序被改变，Vue将不是移动DOM元素来匹配数据项的改变，\n而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。\n举例说明：有一个列表我们现在在中间插入了一个元素，diff算法会默认复用之前的列表并在最后追加一个，\n如果列表存在选中一类的状态则会随着复用出现绑定错误的情况而不是跟着原元素，key的作用就可以给他一个标识，让状态跟着数据渲染。</p>\n</div>\n",null]}